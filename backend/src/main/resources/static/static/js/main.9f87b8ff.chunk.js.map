{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["NaverMapAPI","navermaps","window","naver","maps","mapDivId","style","width","height","defaultCenter","LatLng","defaultZoom","position","animation","Animation","BOUNCE","onClick","alert","bounds","LatLngBounds","url","clickable","paths","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeWeight","path","strokeStyle","App","useState","message","setMessage","useEffect","fetch","then","response","text","className","src","logo","alt","ncpClientId","error","loading","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAAe,MAA0B,iC,sBCazC,SAASA,IACP,IAAMC,EAAYC,OAAOC,MAAMC,KAS/B,OACE,eAAC,IAAD,CACEC,SAAU,oCACVC,MAAO,CACLC,MAAO,OACPC,OAAQ,QAEVC,cAAe,IAAIR,EAAUS,OAAO,WAAY,YAChDC,YAAa,GAPf,UASE,cAAC,IAAD,CACEC,SAAU,IAAIX,EAAUS,OAAO,WAAY,YAC3CG,UAAWZ,EAAUa,UAAUC,OAC/BC,QAAS,WACPC,MAAM,gEAGV,cAAC,IAAD,CACEC,OACE,IAAIjB,EAAUkB,aACZ,IAAIlB,EAAUS,OAAO,aAAc,eACnC,IAAIT,EAAUS,OAAO,aAAc,gBAGvCU,IACE,2EAEFC,WAAW,EACXL,QAAS,WACPC,MAAM,gEAGV,cAAC,IAAD,CACEK,MAAO,CACL,CACE,IAAIrB,EAAUS,OAAO,kBAAmB,oBACxC,IAAIT,EAAUS,OAAO,kBAAmB,oBACxC,IAAIT,EAAUS,OAAO,kBAAmB,oBACxC,IAAIT,EAAUS,OAAO,mBAAoB,oBACzC,IAAIT,EAAUS,OAAO,kBAAmB,oBACxC,IAAIT,EAAUS,OAAO,kBAAmB,oBACxC,IAAIT,EAAUS,OAAO,kBAAmB,oBACxC,IAAIT,EAAUS,OAAO,mBAAoB,oBACzC,IAAIT,EAAUS,OAAO,kBAAmB,sBAG5Ca,UAAW,UACXC,YAAa,GACbC,YAAa,UACbC,cAAe,GACfC,aAAc,IAGhB,cAAC,IAAD,CACEC,KAAM,CACJ,IAAI3B,EAAUS,OAAO,mBAAoB,mBACzC,IAAIT,EAAUS,OAAO,mBAAoB,oBACzC,IAAIT,EAAUS,OAAO,iBAAkB,oBACvC,IAAIT,EAAUS,OAAO,kBAAmB,oBACxC,IAAIT,EAAUS,OAAO,mBAAoB,oBACzC,IAAIT,EAAUS,OAAO,mBAAoB,oBAG3Ce,YAAa,UACbI,YAAa,WACbH,cAAe,GACfC,aAAc,OAoCPG,MA9Bf,WACE,IACA,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAUA,OARAC,qBAAU,WACRC,MAAM,cACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAJ,GACJC,EAAWD,QAEd,IAGD,sBAAKO,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,oBAAIH,UAAU,YAAd,SAA2BP,OAG7B,cAAC,IAAD,CACEW,YAnBW,aAoBXC,MAAO,gDACPC,QAAS,gDAHX,SAKE,cAAC7C,EAAD,UC3GO8C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9f87b8ff.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport {\n  RenderAfterNavermapsLoaded,\n  NaverMap,\n  Marker,\n  GroundOverlay,\n  Polygon,\n  Polyline,\n  Rectangle,\n} from \"react-naver-maps\"; // 패키지 불러오기\n\nfunction NaverMapAPI() {\n  const navermaps = window.naver.maps;\n  const min = { x: 126.5322317, y: 33.3572421 };\n  const max = { x: 126.5364907, y: 33.3608829 };\n  const bounds = {\n    north: max.y,\n    east: max.x,\n    south: min.y,\n    west: min.x,\n  };\n  return (\n    <NaverMap\n      mapDivId={\"maps-getting-started-uncontrolled\"} // default: react-naver-map\n      style={{\n        width: \"100%\", // 네이버지도 가로 길이\n        height: \"85vh\", // 네이버지도 세로 길이\n      }}\n      defaultCenter={new navermaps.LatLng(37.3595704, 127.105399)} // 지도 초기 위치\n      defaultZoom={13} // 지도 초기 확대 배율\n    >\n      <Marker\n        position={new navermaps.LatLng(37.3595704, 127.105399)}\n        animation={navermaps.Animation.BOUNCE}\n        onClick={() => {\n          alert(\"여기는 네이버 입니다.\");\n        }}\n      />\n      <GroundOverlay\n        bounds={\n          new navermaps.LatLngBounds(\n            new navermaps.LatLng(36.634249797, 127.129160067),\n            new navermaps.LatLng(36.734249797, 127.410516004)\n          )\n        }\n        url={\n          \"https://navermaps.github.io/maps.js/docs/img/example/naver-satellite.png\"\n        }\n        clickable={true} // click event를 다루기 위해서는 true로 설정되어야함.\n        onClick={() => {\n          alert(\"여기는 한라산 입니다.\");\n        }}\n      />\n      <Polygon\n        paths={[\n          [\n            new navermaps.LatLng(37.37544345085402, 127.11224555969238),\n            new navermaps.LatLng(37.37230584065902, 127.10791110992432),\n            new navermaps.LatLng(37.35975408751081, 127.10795402526855),\n            new navermaps.LatLng(37.359924641705476, 127.11576461791992),\n            new navermaps.LatLng(37.35931064479073, 127.12211608886719),\n            new navermaps.LatLng(37.36043630196386, 127.12293148040771),\n            new navermaps.LatLng(37.36354029942161, 127.12310314178465),\n            new navermaps.LatLng(37.365211629488016, 127.12456226348876),\n            new navermaps.LatLng(37.37544345085402, 127.11224555969238),\n          ],\n        ]}\n        fillColor={\"#ff0000\"}\n        fillOpacity={0.3}\n        strokeColor={\"#ff0000\"}\n        strokeOpacity={0.6}\n        strokeWeight={3}\n      />\n\n      <Polyline\n        path={[\n          new navermaps.LatLng(37.365620929135716, 127.1036195755005),\n          new navermaps.LatLng(37.365620929135716, 127.11353302001953),\n          new navermaps.LatLng(37.3606921307849, 127.10452079772949),\n          new navermaps.LatLng(37.36821310838941, 127.10814714431763),\n          new navermaps.LatLng(37.360760351656545, 127.11299657821654),\n          new navermaps.LatLng(37.365620929135716, 127.1036195755005),\n        ]}\n        // clickable // 사용자 인터랙션을 받기 위해 clickable을 true로 설정합니다.\n        strokeColor={\"#5347AA\"}\n        strokeStyle={\"longdash\"}\n        strokeOpacity={0.5}\n        strokeWeight={5}\n      />\n    </NaverMap>\n  );\n}\n\nfunction App() {\n  const cliendId = \"drgyzrzre5\";\n  const [message, setMessage] = useState(\"\");\n\n  useEffect(() => {\n    fetch(\"/api/hello\")\n      .then(response => response.text())\n      .then(message => {\n        setMessage(message);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1 className=\"App-title\">{message}</h1>\n      </header>\n\n      <RenderAfterNavermapsLoaded\n        ncpClientId={cliendId} // 자신의 네이버 계정에서 발급받은 Client ID\n        error={<p>Maps Load Error</p>}\n        loading={<p>Maps Loading...</p>}\n      >\n        <NaverMapAPI />\n      </RenderAfterNavermapsLoaded>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}