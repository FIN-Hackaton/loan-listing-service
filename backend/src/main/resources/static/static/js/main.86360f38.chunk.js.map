{"version":3,"sources":["logo.svg","components/MapPage.js","App.js","reportWebVitals.js","index.js"],"names":["MapPage","ncpClientId","error","loading","NaverMapAPI","navermaps","window","naver","maps","useState","mapType","setMapType","chanegeMepType","e","target","type","mapDivId","style","width","height","defaultCenter","LatLng","defaultZoom","Buttons","ControlBtn","controlOn","mapTypeId","onClick","position","animation","Animation","BOUNCE","alert","bounds","LatLngBounds","url","clickable","paths","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeWeight","path","strokeStyle","restProps","margin","color","padding","background","border","cursor","borderRadius","outline","boxShadow","fontSize","props","zIndex","display","App","setMessage","useEffect","fetch","then","response","text","message","className","to","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86360f38.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect } from \"react\";\r\nimport { Route, Link } from \"react-router-dom\";\r\nimport {\r\n  RenderAfterNavermapsLoaded,\r\n  NaverMap,\r\n  Marker,\r\n  GroundOverlay,\r\n  Polygon,\r\n  Polyline,\r\n  Rectangle,\r\n} from \"react-naver-maps\"; // 패키지 불러오기\r\nimport { withNavermaps } from \"react-naver-maps/hocs\";\r\n\r\nexport default function MapPage() {\r\n  const cliendId = \"drgyzrzre5\";\r\n  return (\r\n    <div>\r\n      <RenderAfterNavermapsLoaded\r\n        ncpClientId={cliendId} // 자신의 네이버 계정에서 발급받은 Client ID\r\n        error={<p>Maps Load Error</p>}\r\n        loading={<p>Maps Loading...</p>}\r\n      >\r\n        <NaverMapAPI />\r\n      </RenderAfterNavermapsLoaded>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction NaverMapAPI() {\r\n  const navermaps = window.naver.maps;\r\n  const min = { x: 126.5322317, y: 33.3572421 };\r\n  const max = { x: 126.5364907, y: 33.3608829 };\r\n  const bounds = {\r\n    north: max.y,\r\n    east: max.x,\r\n    south: min.y,\r\n    west: min.x,\r\n  };\r\n\r\n  const [mapType, setMapType] = useState(\"NORMAL\");\r\n  const chanegeMepType = e => {\r\n    //e : 이벤트 객체\r\n    setMapType(e.target.type); //이벤트를 받는 타겟의 value값으로 변경\r\n  };\r\n  return (\r\n    <NaverMap\r\n      mapDivId={\"maps-getting-started-uncontrolled\"} // default: react-naver-map\r\n      style={{\r\n        width: \"100%\", // 네이버지도 가로 길이\r\n        height: \"85vh\", // 네이버지도 세로 길이\r\n      }}\r\n      defaultCenter={new navermaps.LatLng(37.3595704, 127.105399)} // 지도 초기 위치\r\n      defaultZoom={13} // 지도 초기 확대 배율\r\n      //   mapTypeId={mapType}\r\n    >\r\n      <Buttons>\r\n        <ControlBtn\r\n          type=\"NORMAL\"\r\n          controlOn={navermaps.mapTypeId === { mapType }}\r\n          onClick={chanegeMepType}\r\n        >\r\n          일반지도\r\n        </ControlBtn>\r\n        <ControlBtn\r\n          type=\"TERRAIN\"\r\n          //   controlOn={this.state.mapTypeId === navermaps.MapTypeId[\"TERRAIN\"]}\r\n          controlOn={navermaps.mapTypeId === { mapType }}\r\n          onClick={chanegeMepType}\r\n        >\r\n          지형도\r\n        </ControlBtn>\r\n      </Buttons>\r\n\r\n      <Marker\r\n        position={new navermaps.LatLng(37.3595704, 127.105399)}\r\n        animation={navermaps.Animation.BOUNCE}\r\n        onClick={() => {\r\n          alert(\"여기는 네이버 입니다.\");\r\n        }}\r\n      />\r\n      <GroundOverlay\r\n        bounds={\r\n          new navermaps.LatLngBounds(\r\n            new navermaps.LatLng(36.634249797, 127.129160067),\r\n            new navermaps.LatLng(36.734249797, 127.410516004)\r\n          )\r\n        }\r\n        url={\r\n          \"https://navermaps.github.io/maps.js/docs/img/example/naver-satellite.png\"\r\n        }\r\n        clickable={true} // click event를 다루기 위해서는 true로 설정되어야함.\r\n        onClick={() => {\r\n          alert(\"여기는 한라산 입니다.\");\r\n        }}\r\n      />\r\n      <Polygon\r\n        paths={[\r\n          [\r\n            new navermaps.LatLng(37.37544345085402, 127.11224555969238),\r\n            new navermaps.LatLng(37.37230584065902, 127.10791110992432),\r\n            new navermaps.LatLng(37.35975408751081, 127.10795402526855),\r\n            new navermaps.LatLng(37.359924641705476, 127.11576461791992),\r\n            new navermaps.LatLng(37.35931064479073, 127.12211608886719),\r\n            new navermaps.LatLng(37.36043630196386, 127.12293148040771),\r\n            new navermaps.LatLng(37.36354029942161, 127.12310314178465),\r\n            new navermaps.LatLng(37.365211629488016, 127.12456226348876),\r\n            new navermaps.LatLng(37.37544345085402, 127.11224555969238),\r\n          ],\r\n        ]}\r\n        fillColor={\"#ff0000\"}\r\n        fillOpacity={0.3}\r\n        strokeColor={\"#ff0000\"}\r\n        strokeOpacity={0.6}\r\n        strokeWeight={3}\r\n      />\r\n\r\n      <Polyline\r\n        path={[\r\n          new navermaps.LatLng(37.365620929135716, 127.1036195755005),\r\n          new navermaps.LatLng(37.365620929135716, 127.11353302001953),\r\n          new navermaps.LatLng(37.3606921307849, 127.10452079772949),\r\n          new navermaps.LatLng(37.36821310838941, 127.10814714431763),\r\n          new navermaps.LatLng(37.360760351656545, 127.11299657821654),\r\n          new navermaps.LatLng(37.365620929135716, 127.1036195755005),\r\n        ]}\r\n        // clickable // 사용자 인터랙션을 받기 위해 clickable을 true로 설정합니다.\r\n        strokeColor={\"#5347AA\"}\r\n        strokeStyle={\"longdash\"}\r\n        strokeOpacity={0.5}\r\n        strokeWeight={5}\r\n      />\r\n    </NaverMap>\r\n  );\r\n}\r\nfunction ControlBtn({ controlOn = false, ...restProps }) {\r\n  let style = {\r\n    margin: 0,\r\n    color: \"#555\",\r\n    padding: \"2px 6px\",\r\n    background: \"#fff\",\r\n    border: \"solid 1px #333\",\r\n    cursor: \"pointer\",\r\n    borderRadius: \"5px\",\r\n    outline: \"0 none\",\r\n    boxShadow: \"2px 2px 1px 1px rgba(0, 0, 0, 0.5)\",\r\n    fontSize: \"14px\",\r\n    margin: \"0 5px 5px 0\",\r\n  };\r\n\r\n  if (controlOn) {\r\n    style = {\r\n      ...style,\r\n      background: \"#2780E3\",\r\n      color: \"#FFF\",\r\n    };\r\n  }\r\n\r\n  return <button style={style} {...restProps} />;\r\n}\r\n\r\n/**\r\n * Buttons\r\n * 예시에서는 생략되어있다. .buttons 에 해당한다.\r\n */\r\nfunction Buttons(props) {\r\n  return (\r\n    <div\r\n      style={{\r\n        zIndex: 1000,\r\n        position: \"absolute\",\r\n        display: \"inline-block\",\r\n      }}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React, { Component, useEffect, useState } from \"react\";\nimport { BrowserRouter, Route, Link, Switch } from \"react-router-dom\";\n\nimport MapPage from \"./components/MapPage\";\n\nfunction App() {\n  const [message, setMessage] = useState(\"\");\n\n  useEffect(() => {\n    fetch(\"/api/hello\")\n      .then(response => response.text())\n      .then(message => {\n        setMessage(message);\n      });\n  }, []);\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">메인 홈</h1>\n          {/* <h1 className=\"App-title\">{message}</h1> */}\n        </header>\n        <Link to=\"/\">홈</Link> <br />\n        <Link to=\"/MapPage\">지도</Link>\n        <br />\n        <h2>검색창</h2>\n        <Switch>\n          <Route exact path=\"/\" />\n          <Route path=\"/MapPage\" component={MapPage} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}