import React, { Component } from "react";
import { Map, GoogleApiWrapper, Marker } from "google-maps-react";
import InfoWindowEx from "./InfoWindowEx.js";
import MarkerClusterer from "node-js-marker-clusterer";
import "./Map.css";

const HOME_PATH = window.HOME_PATH || ".";
const places = [];
var newCenterLng, newCenterLat; // 매물들의 좌표 중앙값 구하기
class MapInfo extends Component {
  constructor(props) {
    super(props);
    this.state = {
      docked: false,
      stores: [],
      // center: { lat: 37.3595704, lng: 127.105399 },
      showingInfoWindow: false,
      activeMarker: {},
      selectedPlace: {},
    };
    // console.log(this.props);
    // DB로부터 받은 매물 정보 사용가능하게 변환
    const placeLists = this.props.places.lists;
    var leftTop = { lat: 37.3595704, lng: 127.105399 };
    var rightBottom = { lat: 37.3595704, lng: 127.105399 };
    var maxLat = 0;
    var maxLng = 0;

    for (var key in placeLists) {
      places.push(placeLists[key]);

      // 매물들의 좌표 중앙값 구하기
      if (placeLists[key].lat > maxLat) {
        maxLat = placeLists[key].lat;
        leftTop = { lat: placeLists[key].lat, lng: placeLists[key].lng };
      }
      if (placeLists[key].lng > maxLng) {
        maxLng = placeLists[key].lng;
        rightBottom = { lat: placeLists[key].lat, lng: placeLists[key].lng };
      }
    }
    newCenterLat = (leftTop.lat + rightBottom.lat) / 2;
    newCenterLng = (leftTop.lng + rightBottom.lng) / 2;
    console.log(newCenterLat, newCenterLng);
  }

  onMarkerClick = (props, marker, e) => {
    this.setState({
      selectedPlace: props.place_,
      activeMarker: marker,
      showingInfoWindow: true,
    });
    this.props.ifOffSidebar(this.state.selectedPlace); // 사이드바가 닫혀있을 때 마커를 클릭했을 때 장소정보만 전달sidebar...
  };

  showDetails = place => {
    console.log(place);
  };

  onEventChecker = (e, aug, geo) => {
    console.log(e);
    console.log(aug);
    console.log(geo);
  };

  displayMarkers = () => {
    // console.log(places);
    return places.map((place, i) => {
      // console.log(i, place);
      return (
        <Marker
          key={place.id}
          position={{ lat: place.lat, lng: place.lng }}
          label={place.name}
          place_={place}
          animation={0} // {BOUNCE: 1, DROP: 2, Lq: 3, Iq: 4}
          onClick={this.onMarkerClick}
        />
      );
    });
  };

  removeMarkerInfos = () => {
    this.setState({
      showingInfoWindow: false,
    });
    this.props.sideBarOff();
  };

  displayInfoWindows = () => {
    return (
      <InfoWindowEx
        marker={this.state.activeMarker}
        visible={this.state.showingInfoWindow}
      >
        <div>
          <h3>{this.state.selectedPlace.name}</h3>
          <p>정보1</p>
          <p>정보2</p>
          <button
            type="button"
            onClick={() => {
              this.props.sideBarOn(this.state.selectedPlace);
            }}
          >
            Show details
          </button>
        </div>
      </InfoWindowEx>
    );
  };

  render() {
    const googleMap = this.props.google;
    const mapStyles = {
      position: "relative",
      width: "100%",
      height: "calc(100vh - 60px)",
    };
    return (
      <Map
        google={googleMap}
        zoom={12}
        style={mapStyles}
        initialCenter={{ lat: newCenterLat, lng: newCenterLng }}
        onClick={this.removeMarkerInfos}
        streetViewControl={false}
        fullscreenControl={false}
        scaleControl={true}
        mapTypeControlOptions={{
          style: googleMap.maps.MapTypeControlStyle.HORIZONTAL_BAR,
          position: googleMap.maps.ControlPosition.TOP_RIGHT,
        }}
      >
        {this.displayMarkers()}

        {this.displayInfoWindows()}
        {console.log(googleMap.maps)}
      </Map>
    );
  }
}

const LoadingContainer = props => <div>Loading MapData!</div>;

export default GoogleApiWrapper({
  apiKey: process.env.REACT_APP_GOOGLE_MAP_API,
  language: "ko",
  LoadingContainer: LoadingContainer,
})(MapInfo);
